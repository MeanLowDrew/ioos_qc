{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Attenuated Signal Test Example\n",
    "\n",
    "This notebook demonstrates an example of how an attenuation test can be used to detect biofouling on an instrument.\n",
    "\n",
    "The source data is derived from a historical USGS CTD station located at Lower Sand Island, OR in the Columbia River estuary.\n",
    "The selected time period shows the tidal influence on salinity over a spring-neap time period.\n",
    "Near the end of the selected period, there is a decrease in the range of salinity corresponding with biofouling.\n",
    "\n",
    "The data was downloaded from the [Center for Coastal Margin and Prediction (CMOP) Data Explorer](http://amb6400b.stccmop.org/ws/product/offeringplot_ctime.py?handlegaps=true&series=time,sandi.790.A.CTD.salt.PD0&width=8.54&height=2.92&starttime=2001-7-1%200:00&endtime=2001-09-5%2023:59)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup directories\n",
    "from pathlib import Path\n",
    "basedir = Path().absolute()\n",
    "libdir = basedir.parent.parent.parent\n",
    "\n",
    "# Other imports\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from bokeh.layouts import gridplot\n",
    "from bokeh import plotting\n",
    "plotting.output_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Install QC library\n",
    "# !pip install git+git://github.com/ioos/ioos_qc.git\n",
    "\n",
    "# Alternative installation (install specific branch):\n",
    "!pip uninstall -y ioos_qc\n",
    "!pip install git+git://github.com/ioos/ioos_qc.git@attenuated_signal_updates\n",
    "\n",
    "# # Alternative installation (run with local updates):\n",
    "# !pip uninstall -y ioos_qc\n",
    "# import sys\n",
    "# sys.path.append(str(libdir))\n",
    "    \n",
    "from ioos_qc.config import QcConfig\n",
    "from ioos_qc import qartod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Method to plot QC results using Bokeh\n",
    "def plot_results(data, var_name, results, title, test_name):\n",
    "\n",
    "    time = data.index\n",
    "    obs = data[var_name]\n",
    "    qc_test = results['qartod'][test_name]\n",
    "\n",
    "    qc_pass = np.ma.masked_where(qc_test != 1, obs)\n",
    "    qc_suspect = np.ma.masked_where(qc_test != 3, obs)\n",
    "    qc_fail = np.ma.masked_where(qc_test != 4, obs)\n",
    "    qc_notrun = np.ma.masked_where(qc_test != 2, obs)\n",
    "\n",
    "    p1 = plotting.figure(x_axis_type=\"datetime\", title=test_name + ' : ' + title)\n",
    "    p1.grid.grid_line_alpha=0.3\n",
    "    p1.xaxis.axis_label = 'Time'\n",
    "    p1.yaxis.axis_label = 'Observation Value'\n",
    "\n",
    "    p1.line(time, obs,  legend_label='obs', color='#A6CEE3')\n",
    "    p1.circle(time, qc_notrun, size=2, legend_label='qc not run', color='gray', alpha=0.2)\n",
    "    p1.circle(time, qc_pass, size=4, legend_label='qc pass', color='green', alpha=0.5)\n",
    "    p1.circle(time, qc_suspect, size=4, legend_label='qc suspect', color='orange', alpha=0.7)\n",
    "    p1.circle(time, qc_fail, size=6, legend_label='qc fail', color='red', alpha=1.0)\n",
    "    p1.circle(time, qc_notrun, size=6, legend_label='qc not eval', color='gray', alpha=1.0)\n",
    "\n",
    "    plotting.show(gridplot([[p1]], plot_width=800, plot_height=400))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run example\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Load data and perform exploratory analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Historical salinity data from Lower Sand Island, Columbia River Estuary\n",
    "# data: http://amb6400b.stccmop.org/ws/product/offeringplot_ctime.py?handlegaps=true&series=time,sandi.790.A.CTD.salt.PD0&width=8.54&height=2.92&starttime=2001-7-1 0:00&endtime=2001-09-5 23:59\n",
    "# location same as sandi for CREOFS: https://tidesandcurrents.noaa.gov/ofs/ofs_station.shtml?stname=Lower%20Sand%20Island%20Light&ofs=cre&stnid=sandi&subdomain=ba\n",
    "filename = basedir.joinpath('attenuated_salinity_example.csv')\n",
    "\n",
    "data = pd.read_csv(filename, header=1, index_col='\\'time PST\\'', parse_dates=True)\n",
    "data.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "var_name = data.columns[0]\n",
    "data[var_name]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Plot range and standard deviation of salinity over M2 moving window"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lunar day (M2)\n",
    "time_delta = 3600 * 24.8\n",
    "print(f'window: {time_delta}')\n",
    "\n",
    "# start QC after a tidal data\n",
    "# - 24.8 hours of data at 2 minute intervals\n",
    "min_periods = 24.8*60/2\n",
    "# panads uses phrase \"min_periods\" to indicate minimum number of observations\n",
    "# - ioos_qc uses the phrase \"min_obs\"\n",
    "print(f'min_obs: {min_periods}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# range check\n",
    "range_data = data.rolling(f'{time_delta}S', min_periods=int(min_periods)).apply(np.ptp, raw=True)\n",
    "range_data.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check that min_{periods, obs} are NaN\n",
    "# - note that N-1 are NaNs\n",
    "range_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# stdev check\n",
    "stdev_data = data.rolling(f'{time_delta}S', min_periods=int(min_periods)).apply(np.std, raw=True)\n",
    "stdev_data.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Run QC and plot results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Test range\n",
    "\n",
    "The beginning 743 points (`min_obs`) are marked as \"NOT EVALUATED\" because there is not enough data yet to evaluate whether they are pass or fail.\n",
    "\n",
    "The range of the signal falls so quickly that no points are marked as \"SUSPECT\", but immediately change from \"PASS\" to \"FAIL\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# QC configuration\n",
    "# This configuration is used to call the corresponding method in the ioos_qc library\n",
    "# See documentation for description of each test and its inputs: \n",
    "#   https://ioos.github.io/ioos_qc/api/ioos_qc.html#module-ioos_qc.qartod\n",
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 17.25,\n",
    "            \"fail_threshold\": 15,\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": int(min_periods),\n",
    "            \"check_type\": \"range\"\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "\n",
    "p1 = plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Test standard deviation\n",
    "\n",
    "The \"standard deviation\" test picks up likely suspect data whereas the \"range\" test did not.\n",
    "The exemplifies the utility of using both tests in tandem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 5,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": int(min_periods),\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sensitivity Tests\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Test results sensitivity to `min_obs`\n",
    "\n",
    "The following plots demonstrate the sensitivity of the test results in the beginning of a time series to the selection of `min_obs`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `min_obs`: 0\n",
    "\n",
    "No observations are marked suspect at the beginning of the time series, but the first 744 observations (the size of the rolling window) are labeled \"FAILING\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 5,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": 0\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `min_obs`: 10\n",
    "\n",
    "Only the first 10 observations are marked as NOT EVALUATED, but the remainder of the first 744 samples are labeled as \"FAILING\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 5,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": 10\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `min_obs`: 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 5,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": 100\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `min_obs`: 744\n",
    "\n",
    "The first 744 samples are marked \"NOT EVALUATED\", but none are marked as \"FAILING\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 5,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": 744\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Test results sensitivity to `suspect_threshold`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `suspect_threshold`: 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 7,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": 744\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `suspect_threshold`: 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 6,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": 744\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `suspect_threshold`: 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc_config = {\n",
    "    'qartod': {\n",
    "        \"attenuated_signal_test\": {\n",
    "            \"suspect_threshold\": 5,\n",
    "            \"fail_threshold\": 4.5,\n",
    "            \"check_type\": \"std\",\n",
    "            \"test_period\": int(time_delta),\n",
    "            \"min_obs\": 744\n",
    "      }\n",
    "    }\n",
    "}\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(\n",
    "    inp=data[var_name],\n",
    "    tinp=data.index.values\n",
    ")\n",
    "\n",
    "title = \"Salinity [psu] : Lower Sand Island, OR\"\n",
    "plot_results(data, var_name, qc_results, title, 'attenuated_signal_test')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
